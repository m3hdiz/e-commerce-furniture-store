generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Country {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  states State[]
}

model State {
  id        Int     @id @default(autoincrement())
  name      String
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])

  @@unique([name, countryId])
}

// model Users {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   created_at DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc+3:30'::text)")) @db.Timestamptz(6)
//   name       String
// }

model User {
  id  String @id @default(dbgenerated("gen_random_uuid()"))
  email String @unique
  firstName String? 
  lastName String? 
  phone String?
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews  Review[] 
  favorites Favorite[] 
  address   Address[]
  orders    Order[]
  cart      Cart?
}

model Review{
  id   String @id  @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId String 
  author User @relation(fields: [authorId],references: [id])
  rating Float 
  comment   String?
  productId String
  product   Product @relation(fields: [productId], references: [id])
}
model Favorite{
  id   String @id  @default(dbgenerated("gen_random_uuid()"))
  userId String 
  user User @relation(fields: [userId],references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  @@unique([userId, productId])
}

model Product {
  id          String     @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String?
  price       Decimal @default(0.0)
  originalPrice Decimal @default(0.0)
  discountPercent Float  @default(0)
  imageUrl       String? 
  rating  Float   @default(0)
  stock Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  reviews     Review[]
  favorites   Favorite[]

  colors      ProductColor[]

  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])

  orderItem   OrderItem[]
  cartItems   CartItem[]
}

model Color {
  id       String         @id @default(dbgenerated("gen_random_uuid()"))
  name     String         @unique 
  products ProductColor[]
}


model ProductColor {
  productId String
  colorId   String

  product Product @relation(fields: [productId], references: [id])
  color   Color   @relation(fields: [colorId], references: [id])

  @@id([productId, colorId])
}

model Category {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  products  Product[]
}

model Address {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  street    String
  city      String
  state     String
  zipCode String?
  country   String
  company String?
  orderNotes String?

  userId    String   
  user      User     @relation(fields: [userId], references: [id])
  orders Order[] @relation("OrderAddress")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  total      Decimal @default(0.0)
  status     OrderStatus     @default(PENDING)
  createdAt  DateTime    @default(now())
  orderItems OrderItem[]
  addressId  String
  address    Address     @relation("OrderAddress",fields: [addressId], references: [id])

}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}