generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Country {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  states State[]
}

model State {
  id        Int     @id @default(autoincrement())
  name      String
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])

  @@unique([name, countryId])
}

model User {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  email     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  firstName String?
  lastName  String?
  password  String
  phone     String?
  address   Address[]
  cart      Cart?
  favorites Favorite[]
  orders    Order[]
  reviews   Review[]
}

model Review {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  rating    Float
  comment   String?
  productId String
  author    User     @relation(fields: [authorId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Favorite {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Product {
  id              String         @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  description     String?
  price           Decimal        @default(0.0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  categoryId      String
  discountPercent Float          @default(0)
  imageUrl        String?
  originalPrice   Decimal        @default(0.0)
  rating          Float          @default(0)
  stock           Int
  cartItems       CartItem[]
  favorites       Favorite[]
  orderItem       OrderItem[]
  category        Category       @relation(fields: [categoryId], references: [id])
  colors          ProductColor[]
  reviews         Review[]
}

model Color {
  id       String         @id @default(dbgenerated("gen_random_uuid()"))
  name     String         @unique
  code     String         @unique
  products ProductColor[]
}

model ProductColor {
  productId String
  colorId   String
  color     Color   @relation(fields: [colorId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([productId, colorId])
}

model Category {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Address {
  id         String  @id @default(dbgenerated("gen_random_uuid()"))
  street     String
  city       String
  state      String
  country    String
  userId     String
  company    String?
  orderNotes String?
  zipCode    String?
  user       User    @relation(fields: [userId], references: [id])
  orders     Order[] @relation("OrderAddress")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  total      Decimal     @default(0.0)
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  addressId  String
  address    Address     @relation("OrderAddress", fields: [addressId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
